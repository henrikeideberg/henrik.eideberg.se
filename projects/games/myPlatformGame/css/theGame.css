/*
 * The background is drawn as a <table> element. This nicely
 * corresponds to the structure of the rows property of the level—each
 * row of the grid is turned into a table row (<tr> element).
 * The strings in the grid are used as class names for the table cell
 * (<td>) elements. The spread (triple dot) operator is used to pass
 * arrays of child nodes to elt as separate arguments.

 * .background
 *    Some of these (table-layout, border-spacing, and padding) are
 *    used to suppress unwanted default behavior. We don’t want the
 *    layout of the table to depend upon the contents of its cells,
 *    and we don’t want space between the table cells or padding
 *    inside them.
 * 
 * The following CSS makes the table look like the background we want:
*/
.background    { background: rgb(52, 166, 251);
                 table-layout: fixed;
                 border-spacing: 0;              }
.background td { padding: 0;                     }
.lava          { background: rgb(255, 100, 100); }
.wall          { background: white;              }
.actor  { position: absolute;            }
.coin   { background: rgb(241, 229, 89); }
.player { background: rgb(64, 64, 64);   }

/*
 * After touching lava, the player’s color turns dark red,
 * suggesting scorching
*/
.lost .player {
  background: rgb(160, 64, 64);
}

/*
 * When the last coin has been collected,
 * we add two blurred white shadows—one to
 * the top left and one to the top right—to
 * create a white halo effect.
*/
.won .player {
  box-shadow: -4px -7px 8px white, 4px -7px 8px white;
}

/*
 * The following CSS gives the game’s wrapping DOM element a maximum
 * size and ensures that anything that sticks out of the element’s box
 * is not visible. We also give the outer element a relative position
 * so that the actors inside it are positioned relative to the level’s
 * top-left corner.
*/
.game {
  overflow: hidden;
  max-width: 600px;
  max-height: 450px;
  position: relative;
}